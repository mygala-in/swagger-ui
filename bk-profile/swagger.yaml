openapi: 3.0.0
info:
  version: 2.1.0
  title: bk-profile
tags:
  - name: profile
    description: profile service apis
servers:
  - url: https://dev-api.mygala.in
    description: dev
  - url: https://api.mygala.in
    description: prod
  - url: http://localhost:3000
    description: localhost
components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  parameters:
    page:
      in: query
      name: page
      schema:
        type: number
    query:
      in: query
      name: q
      schema:
        type: string
      required: true
    weddingId:
      in: path
      description: unique id of the wedding
      name: weddingId
      schema:
        type: string
      required: true
    eventId:
      in: path
      description: unique id of the event
      name: eventId
      schema:
        type: string
      required: true
    id:
      in: path
      description: unique id
      name: id
      schema:
        type: string
      required: true
    userId:
      in: path
      description: the id can be email, username or phone
      name: userId
      schema:
        type: string
      required: true
    entity:
      in: path
      description: all, wedding, user etc; individual search components
      name: entity
      schema:
        type: string
      required: true
    qUserId:
      in: query
      description: the id of an user
      name: userId
      schema:
        type: string
      required: true
    streamId:
      in: path
      description: unique id of the video stream
      name: streamId
      schema:
        type: string
      required: true
    chatId:
      in: path
      description: unique id of a chat conversation
      name: chatId
      schema:
        type: string
      required: true
    app:
      in: query
      description: app from which the request is being sent
      name: app
      schema:
        type: string
        enum:
          - user
          - vendor
      required: true
    details:
      in: query
      description: if the full details is required or not
      name: details
      schema:
        type: boolean
        default: false
      required: true
    include:
      in: query
      description: extra includes based on requirement
      name: include
      schema:
        type: string
      required: false
    platform:
      in: header
      name: platform
      schema:
        type: string
        enum:
          - android
          - web
          - ios
      required: true
    appversion:
      in: header
      description: build number of the app
      name: appversion
      schema:
        type: integer
        default: 1
      required: true
    vendorId:
      in: path
      description: unique id of the vendor
      name: vendorId
      schema:
        type: integer
      required: true
    packageId:
      in: path
      description: unique id of a vendor package
      name: packageId
      schema:
        type: integer
      required: true
    locationId:
      in: path
      description: unique id of the location
      name: locationId
      schema:
        type: integer
      required: true
    commentId:
      in: path
      description: unique id of the comment
      name: commentId
      schema:
        type: integer
      required: true
    occasion:
      in: query
      name: occasion
      description: The occasion for which recommendations are requested.
      schema:
        type: string
        enum:
          - Birthday
          - Wedding
          - Engagement
          - HouseWarming
          - CorporateEvents
          - BabyShower
          - NamingCeremony
          - BachelorParty
          - Anniversary
      required: true
    wishlistId:
      in: path
      description: unique id of the wishlist
      name: wishlistId
      schema:
        type: string
      required: true
    parentId:
      in: query
      description: wishlist for requested parentId
      name: parentId
      schema:
        type: string
      required: true
  schemas:
    signin:
      properties:
        tokenId:
          description: >-
            the google tokenId received after successful login, usually valid
            for 1hour
          type: string
        uid:
          description: firebase uid of the user
          type: string
        type:
          description: google, apple, phone
          type: string
    signin-resp:
      properties:
        accesstoken:
          description: jwt token encoded with user details such as email, uid, etc.
          type: string
        expiryMillis:
          description: expiry time of accesstoken in epoch milli seconds
          type: number
        isSignUp:
          description: true for first time users, false otherwise
          type: boolean
    profile-settings:
      properties:
        notifications:
          type: object
          properties:
            connRequest:
              type: boolean
            message:
              type: boolean
            likes:
              type: boolean
            comments:
              type: boolean
            commentLikes:
              type: boolean
    profile-update:
      properties:
        name:
          type: string
        username:
          type: string
        bio:
          type: string
        dob:
          description: YYYY-MM-DD format
          type: string
        phone:
          type: string
        gender:
          type: string
        maritial:
          type: string
        lat:
          type: number
        lon:
          type: number
        city:
          type: string
        country:
          type: string
        pincode:
          type: string
        instagram:
          type: string
        facebook:
          type: string
    default:
      type: object
paths:
  /profile/v1/signin/{provider}:
    put:
      summary: used for google signin, apple signin and phone signin
      description: >-
        The same API will be used for google signin & signup. Returns
        accesstoken, expiryMillis & isSignUp boolean values. isSignUp boolean is
        used to determine whether the user follows signin flow or signup flow.
      tags:
        - profile
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum:
              - phone
              - google
              - apple
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signin'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signin-resp'
  /profile/v1/username:
    head:
      summary: to check username availability
      description: >-
        The API to check whether a particular username is available or not.
        returns 200 status code if available, else 4** error codes will be
        returned.
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: username available
        '403':
          description: username taken
  /profile/v1/{userId}:
    put:
      summary: to update the user profile details
      description: >-
        To update the profile fields of the current user. the fields should not
        relate to profile settings.
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile-update'
      responses:
        '200':
          description: success
    get:
      summary: fetch full profile of the user
      description: >-
        Fetches the full user profile details based on the excat match of the
        id. the ID may belong to the current user, or user with public profile,
        or user in connections list, will always result single user.
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
    delete:
      summary: mark profile for deletion
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
  /profile/v1/settings:
    put:
      summary: to update the user profile settings
      description: >-
        To update the profile setttings of the current user. used to manage
        notifications, emails etc. and other user preferences.
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profile-settings'
      responses:
        '200':
          description: success
    get:
      summary: to fetch the user profile settings
      description: >-
        To fetch the profile settings of the current user. settings includes
        configs to manage notifications, emails, and other user preferences.
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
  /profile/v1/search:
    get:
      summary: to fetch mini profiles of matching users
      description: >-
        To fetch mini profiles of matching users. Fizzy search will be made &
        results may contain multiple users, with pagination
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
  /profile/v1/notifications:
    get:
      summary: list of notitication topics for the requested user
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
  /profile/v1/{userId}/assets:
    get:
      summary: to fetch the user profile images of the id
      description: >-
        To fetch all the images of an user based on the id. the ID may belong to
        the current user, or user with public profile, or user in connections
        list.
      tags:
        - profile
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/appversion'
      responses:
        '200':
          description: success
